program keyword 2 7 
fibonacci ID 2 17 
; eop 2 18 
const keyword 3 5 
index ID 3 11 
:= aop 3 13 
30  INT 3 15 
; eop 3 16 
var keyword 4 3 
return ID 4 10 
, sop 4 11 
i ID 4 12 
; eop 4 13 
procedure keyword 5 9 
fib ID 5 13 
( sop 5 14 
x ID 5 15 
) sop 5 16 
; eop 5 17 
var keyword 6 3 
sum ID 6 7 
; eop 6 8 
begin keyword 7 5 
sum ID 8 7 
:= aop 8 9 
0  INT 8 10 
; eop 8 11 
if keyword 9 6 
x ID 9 8 
< cop 9 9 
2  INT 9 10 
then keyword 9 15 
return ID 10 14 
:= aop 10 16 
x ID 10 17 
else ID 11 8 
begin keyword 12 9 
call keyword 13 12 
fib ID 13 16 
( sop 13 17 
x ID 13 18 
- aop 13 19 
1  INT 13 20 
) sop 13 21 
; eop 13 22 
sum ID 14 11 
:= aop 14 13 
sum ID 14 16 
+ aop 14 17 
return ID 14 23 
; eop 14 24 
call keyword 15 12 
fib ID 15 16 
( sop 15 17 
x ID 15 18 
- aop 15 19 
2  INT 15 20 
) sop 15 21 
; eop 15 22 
sum ID 16 11 
:= aop 16 13 
sum ID 16 16 
+ aop 16 17 
return ID 16 23 
; eop 16 24 
return ID 17 14 
:= aop 17 16 
sum ID 17 19 
end keyword 18 7 
end keyword 19 3 
begin keyword 20 5 
i ID 21 5 
:= aop 21 7 
1  INT 21 8 
; eop 21 9 
while keyword 22 9 
i ID 22 11 
<= lop 22 13 
index ID 22 18 
do keyword 22 21 
begin keyword 23 9 
call keyword 24 12 
fib ID 24 16 
( sop 24 17 
i ID 24 18 
) sop 24 19 
; eop 24 20 
write keyword 25 13 
( sop 25 14 
return ID 25 20 
) sop 25 21 
; eop 25 22 
i ID 26 9 
:= aop 26 11 
i ID 26 12 
+ aop 26 13 
1  INT 26 14 
end keyword 26 43 
end keyword 27 3 
